apply plugin: 'com.android.application'

File javaDocDstDir = file('../javadoc')
File zipDstDir = file('../zip')


android {
    signingConfigs {
        config {
            keyAlias 'all_devtool'
            keyPassword 'Salem2nh-k'
            storeFile file('/Users/ldennis/Dropbox/android/keystores/all_devtool.jks')
            storePassword 'Salem2nh-d'
        }
    }
    compileSdkVersion 24
    buildToolsVersion '24.0.3'
    defaultConfig {
        applicationId 'com.landenlabs.all_devtool'
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1912
        versionName '1.9.12'
        signingConfig signingConfigs.config
        targetSdkVersion.apiString
        resValue "string", "targetSdkVersion", targetSdkVersion.apiString
        resValue "string", "compileSdkVersion", compileSdkVersion
        resValue "string", "buildToolsVersion", buildToolsVersion
    }
    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            jniDebuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            applicationVariants.all { variant ->
                appendVersionNameVersionCode(variant, defaultConfig)
            }

            signingConfig signingConfigs.config
        }
        debug {
            minifyEnabled false
            jniDebuggable true
            debuggable true

        }
    }

    lintOptions {
        abortOnError false
        disable 'DefaultLocale', 'SimpleDateFormat', 'InflateParams', 'SpUsage',
                'UseCompoundDrawables', 'HandlerLeak', 'ViewConstructor', 'SetTextI18n',
                'RtlSymmetry', 'RtlHardcoded', 'ContentDescription',
                'MissingTranslation', 'ValidFragment', 'UnusedAttribute'
    }
    productFlavors {
    }
    compileOptions {
    }
}

ext {
    supportLibVersion = '24.2.0'
    leakCanaryVersion = '1.4-beta2'
    playServicesVersion = '9.8.0'
}

dependencies {
    compile "com.android.support:support-v4:${supportLibVersion}"
    compile "com.android.support:appcompat-v7:${supportLibVersion}"

    //  compile "com.google.android.gms:play-services:${playServicesVersion}"
    //  compile "com.google.android.gms:play-services-ads:${playServicesVersion}"
    compile "com.google.android.gms:play-services-maps:${playServicesVersion}"
    compile "com.google.android.gms:play-services-identity:${playServicesVersion}"
    compile "com.google.android.gms:play-services-gcm:${playServicesVersion}"
    compile "com.google.android.gms:play-services-auth:${playServicesVersion}"
    compile "com.google.android.gms:play-services-analytics:${playServicesVersion}"
    compile "com.google.android.gms:play-services-location:${playServicesVersion}"
    compile "com.google.android.gms:play-services-drive:${playServicesVersion}"
    compile 'net.hockeyapp.android:HockeySDK:4.1.1'

    // 3rdparty libraries
    // Memory leaks tool - see main activity to see LeakCanary.install(this.getApplication());
    // debugCompile "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}"
    // releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

    compile 'com.androidplot:androidplot-core:1.4.0'
    compile 'net.danlew:android.joda:2.9.2'
}


def appendVersionNameVersionCode(variant, defaultConfig) {
    variant.outputs.each { output ->
        if (output.zipAlign) {
            def file = output.outputFile
            def fileName = file.name.replace(".apk", "-v" + defaultConfig.versionCode + ".apk")
            def ourname = project.parent.name;
            fileName = fileName.replace("app-", "$ourname-");
            output.outputFile = new File(file.parent, fileName)
        }

        def file = output.packageApplication.outputFile
        def fileName = file.name.replace(".apk", "-v" + defaultConfig.versionCode + ".apk")
        output.packageApplication.outputFile = new File(file.parent, fileName)
    }
}

// Generate Java doc files
task genJavadocs(type: Javadoc) {
    // outputs.upToDateWhen { false }

    source = project.android.sourceSets.main.java.srcDirs
    destinationDir = javaDocDstDir

    println "----------Generate JavaDocs-------------"
    println "  Src= " + source.join(",")
    println "  Dst= " + destinationDir.path
    println "----------------------------------------"

    options.linkSource true
    options.addBooleanOption('Xdoclint:none', true)
    options.addBooleanOption('quiet', true)
    options.addBooleanOption('public', true)

    classpath += project.files(project.android.getBootClasspath().join(File.pathSeparator))
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)

    classpath += fileTree(dir: "$buildDir/intermediates/exploded-aar/", include: "**/classes.jar")

    failOnError false
    exclude '**/*.xml'
}
